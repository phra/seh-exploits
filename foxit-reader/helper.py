#!/usr/bin/env python

import struct

def pattern_create(length = 8192):
    pattern = ''
    parts = ['A', 'a', '0']
    try:
        if not isinstance(length, (int, long)) and length.startswith('0x'):
            length = int(length, 16)
        elif not isinstance(length, (int, long)):
            length = int(length, 10)
    except ValueError:
        print 'ValueError'
        sys.exit(254)
    while len(pattern) != length:
        pattern += parts[len(pattern) % 3]
        if len(pattern) % 3 == 0:
            parts[2] = chr(ord(parts[2]) + 1)
            if parts[2] > '9':
                parts[2] = '0'
                parts[1] = chr(ord(parts[1]) + 1)
                if parts[1] > 'z':
                    parts[1] = 'a'
                    parts[0] = chr(ord(parts[0]) + 1)
                    if parts[0] > 'Z':
                        parts[0] = 'A'
    return pattern

def pattern_offset(value, length = 8192):
    try:
        if value.startswith('0x'):
            value = struct.pack('<I', int(value, 16)).strip('\x00')
    except ValueError:
        print 'ValueError'
        sys.exit(254)
    pattern = pattern_create(length)
    try:
        return pattern.index(value)
    except ValueError:
        return 'Not found'

def generate_badchars(avoid = ''):
    badchars = ''
    badchars_print = ''
    for i in range(0x20, 255):
        if not chr(i) in avoid:
            badchars += chr(i)
            badchars_print += '\\x' + hex(i)[2:].rjust(2, '0')
    print "generated badchars:"
    print badchars_print
    return badchars

def save_file(filename, content):
    print 'generating %s.. [size: %d]' % (filename, len(content))
    f = open(filename, 'w')
    f.write(content)
    f.close()

def fill(payload, total_length, filler = 'D'):
    if (total_length - len(payload)) >= 0:
        return 'D' * (total_length - len(payload))
    else:
        raise Exception('payload too big')
